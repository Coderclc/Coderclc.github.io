import{_ as l}from"./webpack-context.fc3aa3a3.js";import{_ as p,o as e,c as t,a as s,b as D,e as a,d as n,r as c}from"./app.a81d06d1.js";const r={},y=a(`<h1 id="webpack-front-end-automated-imports" tabindex="-1"><a class="header-anchor" href="#webpack-front-end-automated-imports" aria-hidden="true">#</a> Webpack - Front-end automated imports</h1><h2 id="_1-require-context" tabindex="-1"><a class="header-anchor" href="#_1-require-context" aria-hidden="true">#</a> 1. require.context</h2><p>In the process of reading the vue-element-admin project, the author adopts the following operations to introduce the svg vector graphics used globally</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">req</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">require</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">context</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;./svg&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span><span style="color:#D16969;"> /</span><span style="color:#D7BA7D;">\\.</span><span style="color:#D16969;">svg</span><span style="color:#DCDCAA;">$</span><span style="color:#D16969;">/</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">requireAll</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">requireContext</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">requireContext</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">keys</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">requireContext</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">requireAll</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><p>I can&#39;t help but have some doubts in my heart. What is the working principle of importing hundreds of files in just two lines?</p><p>It is not difficult to see that the key lies in the require.context object</p>`,6),i=n("According to the "),C={href:"https://webpack.js.org/guides/dependency-management/#require-context",target:"_blank",rel:"noopener noreferrer"},u=n("official documentation"),d=n(", this object must use webpack to build the project (or Vue CLI 3+ that uses webpack internally) , then you can use "),h=s("code",null,"require.context",-1),E=a(`<p>Analyze the require.context function</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">require</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">context</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">directory</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">includeSubdirs</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Boolean</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">/* optional, default is true */</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">filter</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">RegExp</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">/* optional, default is /^\\.\\/.*$/, all files */</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">mode</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">/* optional, &#39;sync&#39; | &#39;eager&#39; | &#39;weak&#39; | &#39;lazy&#39; | &#39;lazy-once&#39;, default value is &#39;sync&#39; */</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><p>This function accepts a total of four parameters</p><ol><li>directory import file path string type</li><li>Whether includeSubdirs recursively subfolders boolean type</li><li>filter filter filter by regular expression</li><li>mode There are four modes: &#39;sync&#39; | &#39;eager&#39; | &#39;weak&#39; | &#39;lazy&#39; | &#39;lazy-once&#39;</li></ol><p>In the code, require.context returns a req and outputs it in the console</p><p><img src="`+l+`" alt="webpackContext.png"></p><p>The return value is a function called webpackContext</p><p>So what is its working principle? It must be known by consulting the source code.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">__webpack_require__</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">o</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">prop</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">hasOwnProperty</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">prop</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&#39;./404.svg&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;./src/icons/svg/404.svg&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&#39;./account.svg&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;./src/icons/svg/account.svg&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&#39;./admin.svg&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;./src/icons/svg/admin.svg&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&#39;./bug.svg&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;./src/icons/svg/bug.svg&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">webpackContext</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">webpackContextResolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">__webpack_require__</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">webpackContextResolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">__webpack_require__</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">o</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Cannot find module &#39;&quot;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">&quot;&#39;&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">code</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;MODULE_NOT_FOUND&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">throw</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">webpackContext</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">keys</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">webpackContextKeys</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">keys</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">webpackContext</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">webpackContextResolve</span></span>
<span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">webpackContext</span></span>
<span class="line"><span style="color:#9CDCFE;">webpackContext</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"></span></code></pre></div><p>This is an example of md in the webpack source code, which is clear at a glance.</p><p>When the require.context function is called, a map object is generated inside the webpack module,</p><p>The return value webpackContext object has a property keys, which corresponds to a function that returns an array of map keys of the internal object of the module</p><p>Internally, the error handling of whether the key is in the map object itself is also done. Object.prototype.hasOwnProperty.call(obj, prop)</p><p>After importing via __webpack_require__ (the original require function. This expression will not be resolved as a dependency by the parser)</p><p>At this point, I have learned that the import of the past hundreds of lines can be achieved with a few lines of code through require.context</p><h2 id="second-vue-global-registration-components" tabindex="-1"><a class="header-anchor" href="#second-vue-global-registration-components" aria-hidden="true">#</a> Second, Vue global registration components</h2><p>Since require.context can be used to batch import modules, can it be used to batch register global modules?</p><p>The answer is yes</p><p>Vue official has given a good example</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// Globally register all base components for convenience, because they</span></span>
<span class="line"><span style="color:#6A9955;">// will be used very frequently. Components are registered using the</span></span>
<span class="line"><span style="color:#6A9955;">// PascalCased version of their file name.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">Vue</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// https://webpack.js.org/guides/dependency-management/#require-context</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">requireComponent</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">require</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">context</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Look for files in the current directory</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&#39;.&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Do not look in subdirectories</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Only include &quot;_base-&quot; prefixed .vue files</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#D16969;">/_base-</span><span style="color:#CE9178;">[</span><span style="color:#D16969;">\\w-</span><span style="color:#CE9178;">]</span><span style="color:#D7BA7D;">+\\.</span><span style="color:#D16969;">vue</span><span style="color:#DCDCAA;">$</span><span style="color:#D16969;">/</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// For each matching file name...</span></span>
<span class="line"><span style="color:#9CDCFE;">requireComponent</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">keys</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fileName</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Get the component config</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">componentConfig</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">requireComponent</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fileName</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Get the PascalCase version of the component name</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">componentName</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">fileName</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Remove the &quot;./_&quot; from the beginning</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#D16969;">/</span><span style="color:#DCDCAA;">^</span><span style="color:#D7BA7D;">\\.\\/</span><span style="color:#D16969;">_/</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Remove the file extension from the end</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#D16969;">/</span><span style="color:#D7BA7D;">\\.</span><span style="color:#D16969;">\\w</span><span style="color:#D7BA7D;">+</span><span style="color:#DCDCAA;">$</span><span style="color:#D16969;">/</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Split up kebabs</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">split</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;-&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Upper case</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">kebab</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">kebab</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">toUpperCase</span><span style="color:#D4D4D4;">() + </span><span style="color:#9CDCFE;">kebab</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">slice</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Concatenated</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">join</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Globally register the component</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">Vue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">component</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">componentName</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">componentConfig</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">default</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">componentConfig</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><p>Just in the forEach iteration process, filter the key of the map, get the registered component name and call Vue.component to register</p><p>It should be noted here that .vue files are usually exported through <code>export default</code>, then <code>componentConfig.default</code> will be used first, otherwise it will fall back to using the root of the module.</p><p>And registering components needs to be done before Vue is instantiated.</p>`,23);function A(m,f){const o=c("ExternalLinkIcon");return e(),t("div",null,[y,s("p",null,[i,s("a",C,[u,D(o)]),d,h]),E])}var F=p(r,[["render",A],["__file","webpack-frontend-automated-imports.html.vue"]]);export{F as default};
