import{_ as l,o as p,c as o,a as s,b as D,d as a,e,r as c}from"./app.a81d06d1.js";const r={},t=s("h1",{id:"js-async-\u548C-await",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#js-async-\u548C-await","aria-hidden":"true"},"#"),a(" JS - async \u548C await")],-1),y=s("h2",{id:"\u4E00\u3001async-\u51FD\u6570",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#\u4E00\u3001async-\u51FD\u6570","aria-hidden":"true"},"#"),a(" \u4E00\u3001async \u51FD\u6570")],-1),i=s("blockquote",null,[s("p",null,"An async function is a function declared with the async keyword")],-1),C=s("li",null,"\u51FD\u6570\u540D\u4E4B\u524D\u52A0\u4E0A async \u5173\u952E\u5B57\uFF0C\u5C31\u8868\u660E\u8BE5\u51FD\u6570\u5185\u90E8\u6709\u5F02\u6B65\u64CD\u4F5C",-1),d=a("async \u51FD\u6570\u8FD4\u56DE\u4E00\u4E2A Promise \u5BF9\u8C61("),E={href:"https://www.jianshu.com/p/5e6c528edfe1",target:"_blank",rel:"noopener noreferrer"},h=a("JS - Promise \u4F7F\u7528"),u=a(")"),A=e(`<h3 id="_1-1-async-\u51FD\u6570\u8FD4\u56DE\u503C" tabindex="-1"><a class="header-anchor" href="#_1-1-async-\u51FD\u6570\u8FD4\u56DE\u503C" aria-hidden="true">#</a> 1.1 async \u51FD\u6570\u8FD4\u56DE\u503C</h3><p>\u53EF\u7528 async \u51FD\u6570\u8FD4\u56DE\u503C\u7279\u6027\u91CD\u6784</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;success&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">bar</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;success&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">// success</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">bar</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">// success</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><hr><p>\u6355\u83B7\u5931\u8D25\u629B\u51FA\u5F02\u5E38\u5373\u53EF</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">\u5F02\u6B65\u8BF7\u6C42\u6210\u529F</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;success&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">  } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">throw</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;error&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">  .</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">// success</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">  .</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">// error</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"></span></code></pre></div><h2 id="\u4E8C\u3001await-\u64CD\u4F5C\u7B26" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u3001await-\u64CD\u4F5C\u7B26" aria-hidden="true">#</a> \u4E8C\u3001await \u64CD\u4F5C\u7B26</h2><blockquote><p>The await operator is used to wait for a Promise. It can only be used inside an async function.</p></blockquote><ul><li>await \u64CD\u4F5C\u7B26\u7528\u4E8E\u7B49\u5F85\u4E00\u4E2A Promise \u5BF9\u8C61\u3002</li><li>\u53EA\u80FD\u5728\u5F02\u6B65\u51FD\u6570 async function \u4E2D\u4F7F\u7528\u3002</li></ul><h3 id="_2-1-await-\u7528\u6CD5" tabindex="-1"><a class="header-anchor" href="#_2-1-await-\u7528\u6CD5" aria-hidden="true">#</a> 2.1 await \u7528\u6CD5</h3><ol><li>await \u9047\u5230 Promis \u65F6\u4F1A\u6682\u505C async function \u7684\u6267\u884C\uFF0C\u7B49\u5F85 Promise \u5904\u7406\u5B8C\u6210\u3002</li><li>\u82E5 Promise \u6B63\u5E38\u5904\u7406(fulfilled)\uFF0C\u5176\u56DE\u8C03\u7684 resolve \u51FD\u6570\u53C2\u6570\u4F5C\u4E3A await \u8868\u8FBE\u5F0F\u7684\u503C\uFF0C\u7EE7\u7EED\u6267\u884C async function\u3002</li><li>\u82E5 Promise \u5904\u7406\u5F02\u5E38(rejected)\uFF0Cawait \u8868\u8FBE\u5F0F\u4F1A\u628A Promise \u7684\u5F02\u5E38\u539F\u56E0\u629B\u51FA\u3002</li><li>\u5982\u679C await \u64CD\u4F5C\u7B26\u540E\u7684\u8868\u8FBE\u5F0F\u7684\u503C\u4E0D\u662F\u4E00\u4E2A Promise\uFF0C\u5219\u8FD4\u56DE\u8BE5\u503C\u672C\u8EAB\u3002</li></ol><h4 id="_2-1-1-\u9047\u5230-promise-\u6682\u505C-async-\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#_2-1-1-\u9047\u5230-promise-\u6682\u505C-async-\u51FD\u6570" aria-hidden="true">#</a> 2.1.1 \u9047\u5230 Promise \u6682\u505C async \u51FD\u6570</h4><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2000</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;2s\u540E\u6267\u884C&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span></code></pre></div><h4 id="_2-1-2-promise-resolve-\u7684\u503C\u4F5C\u4E3A-await-\u7684\u8FD4\u56DE\u503C" tabindex="-1"><a class="header-anchor" href="#_2-1-2-promise-resolve-\u7684\u503C\u4F5C\u4E3A-await-\u7684\u8FD4\u56DE\u503C" aria-hidden="true">#</a> 2.1.2 Promise resolve \u7684\u503C\u4F5C\u4E3A await \u7684\u8FD4\u56DE\u503C</h4><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">why</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;success&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">why</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">// success</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span></code></pre></div><h4 id="_2-1-3-await-\u629B\u51FA-promise-\u5904\u7406\u5F02\u5E38" tabindex="-1"><a class="header-anchor" href="#_2-1-3-await-\u629B\u51FA-promise-\u5904\u7406\u5F02\u5E38" aria-hidden="true">#</a> 2.1.3 await \u629B\u51FA Promise \u5904\u7406\u5F02\u5E38</h4><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">reject</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;error&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Uncaught (in promise) error</span></span>
<span class="line"><span style="color:#D4D4D4;">  } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">// error</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span></code></pre></div><h4 id="_2-1-4-\u975E-promise-\u5BF9\u8C61\u76F4\u63A5\u8FD4\u56DE\u5BF9\u5E94\u7684\u503C\u3002" tabindex="-1"><a class="header-anchor" href="#_2-1-4-\u975E-promise-\u5BF9\u8C61\u76F4\u63A5\u8FD4\u56DE\u5BF9\u5E94\u7684\u503C\u3002" aria-hidden="true">#</a> 2.1.4 \u975E Promise \u5BF9\u8C61\u76F4\u63A5\u8FD4\u56DE\u5BF9\u5E94\u7684\u503C\u3002</h4><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;why&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">// why</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-2-await-\u7ED3\u5408-node-js-\u7B80\u5355\u5E94\u7528" tabindex="-1"><a class="header-anchor" href="#_2-2-await-\u7ED3\u5408-node-js-\u7B80\u5355\u5E94\u7528" aria-hidden="true">#</a> 2.2 await \u7ED3\u5408 Node.js \u7B80\u5355\u5E94\u7528</h3><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">fs</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;fs&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IRead</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IWrite</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">content</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">flag</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">readFile</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">IRead</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">fs</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">readFile</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">encoding:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;utf-8&quot;</span><span style="color:#D4D4D4;"> }, (</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">) </span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">writeFile</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">IWrite</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">content</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">flag</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">fs</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">writeFile</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">content</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">flag</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">encoding:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;utf-8&quot;</span><span style="color:#D4D4D4;"> }, (</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">) </span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">fs</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">readdir</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;../NODE&quot;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">files</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">files</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">content</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">readFile</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">writeFile</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;integration.text&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">content</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&quot;a+&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Write succeeded&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>\u5C06\u8BFB\u5199\u6587\u4EF6\u5C01\u88C5\u4E3A\u8FD4\u56DE Promise \u51FD\u6570,\u7528 await \u5173\u952E\u5B57,\u7B49\u5F85\u6587\u4EF6\u7684\u8BFB\u53D6\u56DE\u8C03\u6210\u529F\u4EE5\u540E,\u518D\u5C06\u6587\u4EF6\u5199\u5165\u96C6\u5408.</p>`,22);function f(F,g){const n=c("ExternalLinkIcon");return p(),o("div",null,[t,y,i,s("ul",null,[C,s("li",null,[d,s("a",E,[h,D(n)]),u])]),A])}var _=l(r,[["render",f],["__file","js-async&&await.html.vue"]]);export{_ as default};
