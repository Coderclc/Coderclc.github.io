import{_ as s,o as n,c as a,e as o}from"./app.a81d06d1.js";const l={},p=o(`<h1 id="js-this-points-to" tabindex="-1"><a class="header-anchor" href="#js-this-points-to" aria-hidden="true">#</a> JS - This points to</h1><h2 id="_1-what-is-this" tabindex="-1"><a class="header-anchor" href="#_1-what-is-this" aria-hidden="true">#</a> 1. What is this</h2><blockquote><p>A <strong>function&#39;s <code>this</code> keyword</strong> behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.</p></blockquote><p>From the official documentation we know</p><ul><li>this is a keyword</li><li>this is mainly used in functions</li><li>this points to something different in strict mode</li></ul><h3 id="_1-1-global-environment" tabindex="-1"><a class="header-anchor" href="#_1-1-global-environment" aria-hidden="true">#</a> 1.1 Global Environment</h3><p>In the global execution environment (outside any function body) this refers to the global object, whether in strict mode or not. (The window in the browser is the Global object specified by ECMAscript)</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#CE9178;">&#39;use strict&#39;</span></span>
<span class="line"><span style="color:#6A9955;">// in Node</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// in the browser</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">//window</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">//true</span></span>
<span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;foo&#39;</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">//foo</span></span>
<span class="line"><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;bar&#39;</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">//bar</span></span>
<span class="line"></span></code></pre></div><h4 id="_1-1-1-execution-context" tabindex="-1"><a class="header-anchor" href="#_1-1-1-execution-context" aria-hidden="true">#</a> 1.1.1 Execution Context</h4><p>Variables declared in the global scope with the var keyword and variables that are omitted from the declaration are added as properties of the global object</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;foo&#39;</span></span>
<span class="line"><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;bar&#39;</span></span>
<span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">// foo</span></span>
<span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">// bar</span></span>
<span class="line"></span></code></pre></div><p>Variables declared with const and let keywords have their own scope</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">foo</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;foo&#39;</span></span>
<span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;bar&#39;</span></span>
<span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">// undefined</span></span>
<span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">// undefined</span></span>
<span class="line"></span></code></pre></div><h3 id="_1-2-function-in-run-environment" tabindex="-1"><a class="header-anchor" href="#_1-2-function-in-run-environment" aria-hidden="true">#</a> 1.2 Function (In-Run) Environment</h3><p>Inside a function, what this refers to depends on how the function was called.</p><h4 id="_1-2-1-simple-function-call" tabindex="-1"><a class="header-anchor" href="#_1-2-1-simple-function-call" aria-hidden="true">#</a> 1.2.1 Simple function call</h4><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">//The value of this in non-strict mode points to the global object by default.</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#6A9955;">// in Node</span></span>
<span class="line"><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// Object [global]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// in the browser</span></span>
<span class="line"><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">//window</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">//This defaults to undefined in strict mode.</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&#39;use strict&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#6A9955;">// in Node</span></span>
<span class="line"><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// in the browser</span></span>
<span class="line"><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// undefined</span></span>
<span class="line"></span></code></pre></div><h4 id="_1-2-2-function-as-a-method-call-of-an-object" tabindex="-1"><a class="header-anchor" href="#_1-2-2-function-as-a-method-call-of-an-object" aria-hidden="true">#</a> 1.2.2 Function as a method call of an object</h4><p>(1) When a function is called as a method, this refers to the object that called the method</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">fn</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// foo</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = {}</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">fn</span></span>
<span class="line"><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// foo</span></span>
<span class="line"></span></code></pre></div><p>(2) Chain call, this points to the previous binding object</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">fn</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">bar:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">bar</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// this -&gt;bar</span></span>
<span class="line"></span></code></pre></div><p>(3) No object is bound when the function is called, which is implicitly lost</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// implicitly lost</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">fn</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fn</span></span>
<span class="line"><span style="color:#DCDCAA;">bar</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// window</span></span>
<span class="line"></span></code></pre></div><h2 id="second-this-and-arrow-functions" tabindex="-1"><a class="header-anchor" href="#second-this-and-arrow-functions" aria-hidden="true">#</a> Second, this and arrow functions</h2><h3 id="_2-1-in-arrow-functions-this-is-the-same-as-this-in-the-nearest-scope" tabindex="-1"><a class="header-anchor" href="#_2-1-in-arrow-functions-this-is-the-same-as-this-in-the-nearest-scope" aria-hidden="true">#</a> 2.1 In arrow functions, this is the same as this in the nearest scope</h3><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">fn</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#DCDCAA;">bar</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// this -&gt; foo</span></span>
<span class="line"></span></code></pre></div><p>The fn function returns an anonymous arrow function, the this in the arrow function is looked up one level up, at this time this in the arrow function=&gt; this in fn</p><h3 id="_2-2-arrow-functions-in-methods-of-objects" tabindex="-1"><a class="header-anchor" href="#_2-2-arrow-functions-in-methods-of-objects" aria-hidden="true">#</a> 2.2 Arrow functions in methods of objects</h3><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">bar:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">fn</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">// window</span></span>
<span class="line"><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">//window</span></span>
<span class="line"></span></code></pre></div><p>At this time, although the fn function is called as a method of foo, because the arrow function looks up the scope this, the this of the arrow function points to window</p><h2 id="three-this-and-anonymous-functions" tabindex="-1"><a class="header-anchor" href="#three-this-and-anonymous-functions" aria-hidden="true">#</a> Three, this and anonymous functions</h2><p>this object is bound based on the runtime environment of the function</p><p>Because the execution environment of anonymous functions is global, this object often points to window</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">fn</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">()() </span><span style="color:#6A9955;">// this -&gt; window</span></span>
<span class="line"></span></code></pre></div><p>Why doesn&#39;t this in the scope of the anonymous function access this in the outer scope fn? Because the function will automatically obtain two special variables, this and arguments, when the function is called, and the anonymous function itself will also obtain this pointing to the window. Its active object is stopped.</p><p>So how to access this in fn?</p><h3 id="_3-1-saving-through-closures" tabindex="-1"><a class="header-anchor" href="#_3-1-saving-through-closures" aria-hidden="true">#</a> 3.1 Saving through closures</h3><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">fn</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">_this</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">_this</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">()() </span><span style="color:#6A9955;">// _this -&gt; foo</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-2-accessing-outer-scopes-via-arrow-functions" tabindex="-1"><a class="header-anchor" href="#_3-2-accessing-outer-scopes-via-arrow-functions" aria-hidden="true">#</a> 3.2 Accessing outer scopes via arrow functions</h3><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">fn</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">()() </span><span style="color:#6A9955;">// this -&gt; foo</span></span>
<span class="line"></span></code></pre></div><h2 id="four-this-and-call-and-apply" tabindex="-1"><a class="header-anchor" href="#four-this-and-call-and-apply" aria-hidden="true">#</a> Four, this and call() and apply()</h2><p>The this value can be bound to a specific object in the call by using the call or apply methods that functions inherit from Function.prototype.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = {}</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;"> = []</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">bar</span><span style="color:#D4D4D4;">(...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">, ...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// this -&gt; foo</span></span>
<span class="line"><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apply</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// this -&gt; foo</span></span>
<span class="line"></span></code></pre></div><p>The difference between call and apply is that the call() method accepts a list of parameters, while the apply() method accepts an array containing multiple parameters.</p><h2 id="five-this-and-bind" tabindex="-1"><a class="header-anchor" href="#five-this-and-bind" aria-hidden="true">#</a> Five, this and bind()</h2><p>ECMAScript 5 introduced Function.prototype.bind(). Calling f.bind(someObject) will create a function with the same body and scope as f, but in this new function, this will be permanently bound to the first parameter of bind, no matter how the function is called called.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;"> = {}</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">bar</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">bind</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">// this -&gt; obj</span></span>
<span class="line"><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">foo</span></span>
<span class="line"><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">() </span><span style="color:#6A9955;">//this -&gt; obj</span></span>
<span class="line"></span></code></pre></div><h2 id="six-this-and-getter-and-setter" tabindex="-1"><a class="header-anchor" href="#six-this-and-getter-and-setter" aria-hidden="true">#</a> Six, this and getter and setter</h2><p>When the function is called in a getter or setter. Functions used as getters or setters bind this to the object that sets or gets the property.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = {}</span></span>
<span class="line"><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">defineProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;bar&#39;</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">// this -&gt; foo</span></span>
<span class="line"></span></code></pre></div><h2 id="seven-this-and-constructor" tabindex="-1"><a class="header-anchor" href="#seven-this-and-constructor" aria-hidden="true">#</a> Seven, this and constructor</h2><p>When a function is used as a constructor (using the new keyword), this is bound to the new object constructed.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">why</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">why</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">why</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;why&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">why</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">// -&gt; why</span></span>
<span class="line"></span></code></pre></div><h2 id="eight-this-and-dom-event-handlers" tabindex="-1"><a class="header-anchor" href="#eight-this-and-dom-event-handlers" aria-hidden="true">#</a> Eight, this and DOM event handlers</h2><p>In most browsers, when a function is used as an event handler, its this points to the element that triggered the event</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">btn</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementsByClassName</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;btn&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">btn</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">btn</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">].</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;click&#39;</span><span style="color:#D4D4D4;">, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#6A9955;">// this -&gt;btn[i]</span></span>
<span class="line"></span></code></pre></div><p>Summary In non-strict mode, in the browser</p><ul><li>outside the function this points to window</li><li>The this pointer in the function depends on the calling method</li><li>The arrow function this points to this in the upper scope</li><li>Anonymous function this points to window</li></ul>`,61),e=[p];function t(c,D){return n(),a("div",null,e)}var i=s(l,[["render",t],["__file","js-this.html.vue"]]);export{i as default};
